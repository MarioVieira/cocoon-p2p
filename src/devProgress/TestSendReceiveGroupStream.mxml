<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:p2p="com.projectcocoon.p2p.*">
	
	<fx:Script>
		<![CDATA[
			import com.projectcocoon.p2p.events.MediaBroadcastEvent;
			import com.projectcocoon.p2p.events.MessageEvent;
			import com.projectcocoon.p2p.util.Tracer;
			import com.projectcocoon.p2p.vo.MediaVO;
			
			import mx.core.UIComponent;
			
			[Bindable] public var sendStreamButtonEnabled:Boolean;
			[Bindable] public var clientName :String;
			[Bindable] public var groupName  :String;
			
			private var _video:Video;
			private var _testReceiveStream:NetStream;
			
			override protected function childrenCreated():void
			{
				Tracer.loggerSparkTextArea = debug;
			}
			
			protected function channel_dataReceivedHandler(event:MessageEvent):void
			{
				if (event.message.data) 
					debug.text += "\n"+event.message.data.toString();
			}
			
			protected function channel_mediaBroadcastHandler(event:MediaBroadcastEvent):void
			{
				playStream(event.mediaInfo);
			}
			
			/*** 
			 * 
			 * FOR NetStream CONNECTION TESTS ONLY 
			 * 
			 * Will move it to an abstraction that will either dispatch a reference of the NetStream connected to the publisher, or the actual media object
			 * As for sound it can be either a reading bytes from the NetStream.appendBytes or the new sounf API of the Incubator build (https://bugs.adobe.com/jira/browse/FP-1651)
			 * 
			 * 1st need to get this published NetStream to play though...
			 * 
			 ****/
			
			private function broadcast(event:Event):void
			{
				var cam:Camera 		= Camera.getCamera();
				var mic:Microphone 	= Microphone.getMicrophone();
				
				mic.setLoopBack(false);
				mic.rate = 8;
				
				channel.microphone = mic;
				channel.camera     = cam;
				channel.startBrodcast();
				
				Button(event.target).enabled = false;
			}
			
			private function playStream(mediaInfo:MediaVO):void
			{
				//Tracer.log(TestSendReceiveGroupStream, "playStream - subscriber group spec: "+ channel.localClientGroupspecWithAuthorization);
				Tracer.log(TestSendReceiveGroupStream, "playStream - publisherStream: "+mediaInfo.publisherStream);
				//Tracer.log(TestSendReceiveGroupStream, "playStream - gSpec: "+mediaInfo.publisherGroupspecWithAuthorization);
				
				_testReceiveStream = new NetStream(channel.groupNetConnection(), channel.localClientGroupspecWithAuthorization);// mediaInfo.publisherGroupspecWithAuthorization);
				_testReceiveStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				
				_testReceiveStream.play(mediaInfo.publisherStream);
				
				
				setupVideo(_testReceiveStream, null);
			}
			
			private function playStreamTest(mediaInfo:MediaVO):void
			{
				Tracer.log(TestSendReceiveGroupStream, "playStream TEST - publisherStream: "+mediaInfo.publisherStream);
				var groupspec:GroupSpecifier   = new GroupSpecifier(channel.groupName);
				groupspec.postingEnabled 	   = true;
				groupspec.serverChannelEnabled = true;
				groupspec.multicastEnabled 	   = true;
				groupspec.ipMulticastMemberUpdatesEnabled = true;
			
				groupspec.addIPMulticastAddress(channel.multicastAddress);
			
				_testReceiveStream = new NetStream(channel.groupNetConnection(), groupspec.groupspecWithAuthorizations());
				_testReceiveStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
			
				_testReceiveStream.play(mediaInfo.publisherStream);
			}
			
			
			protected function sendMessage():void
			{
				if(textInput.text != '') channel.sendMessageToAll(textInput.text);
			}
			
			private function netStatusHandler(event:NetStatusEvent):void
			{
				Tracer.log(TestSendReceiveGroupStream, "NetStream netStatusHandler - event.info.code: "+event.info.code);
			}
			
			public function receiveMessage(text:String):void
			{
				Tracer.log(TestSendReceiveGroupStream, "RECEIVED FROM NetStream: "+text);
			}
			
			private function setupVideo(netStream:NetStream, cam:Camera):void
			{
				Tracer.log(TestSendReceiveGroupStream, "setupVideo - netStream: "+netStream+" cam: "+cam);
				
				if(!_video)
				{
					_video = new Video(320,240);
				
					var uic:UIComponent = new UIComponent();
					uic.addChild(_video);
					videoHolder.addElement(uic);
				}
				
				if(netStream) _video.attachNetStream(netStream);
				else if(cam)  _video.attachCamera(cam);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		
		<p2p:LocalNetworkDiscovery
			id="channel"
			clientName="{ clientName }"
			loopback="false"
			
			dataReceived="channel_dataReceivedHandler(event)"
			mediaBroadcast="channel_mediaBroadcastHandler(event)"/>
		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout
			paddingTop="10"
			paddingBottom="10"
			paddingLeft="10"
			paddingRight="10"/>
	</s:layout>
	
	<s:HGroup width="100%">
		<s:TextInput id="textInput" width="100%" enter="sendMessage()"/>
		<s:Button label="send message to all" click="sendMessage()" />
	</s:HGroup>
	
	<s:HGroup
		width="100%"
		paddingLeft="5"
		paddingRight="5">
		
		<s:TextArea id="debug" width="100%" height="100%"/>
		<s:BorderContainer
			id="videoHolder"
			height="240"
			width="320"/>
		
	</s:HGroup>
	
	<s:HGroup>
		<s:Button
			label="send stream"
			enabled="{ sendStreamButtonEnabled }"
			click="broadcast(event)"/>
		
		<s:Button
			label="play local cam"
			click="setupVideo(null, Camera.getCamera())"/>
	</s:HGroup>
	
	<s:List x="0" y="100" width="100%" height="100%" 
			dataProvider="{ channel.clients }"
			labelField="clientName"/>
</s:Group>
