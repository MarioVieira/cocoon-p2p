<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:p2p="com.projectcocoon.p2p.*">
	
	<fx:Script>
		<![CDATA[
			import air.net.URLMonitor;
			
			import com.projectcocoon.p2p.events.GroupEvent;
			import com.projectcocoon.p2p.events.MediaBroadcastEvent;
			import com.projectcocoon.p2p.events.MessageEvent;
			import com.projectcocoon.p2p.util.Tracer;
			import com.projectcocoon.p2p.vo.MediaVO;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			[Bindable] public var sendStreamButtonEnabled:Boolean;
			[Bindable] public var clientName : String;
			[Bindable] public var groupName  : String;
			
			private var _video				 : Video; 
			private var _testReceiveStream	 : NetStream;
			
			override protected function childrenCreated():void
			{
				//Tracer.loggerSparkTextArea = debug;
				channel.connect();
			}
			
			private function updateClientName():void
			{
				channel.clientName = clientNameInput.text;
			}
			
			private function channel_groupConnectedHandler(event:GroupEvent):void
			{
				Tracer.log(this, "channel_groupConnectedHandler");
				//startMonitor();
			}
			
			protected function channel_dataReceivedHandler(event:MessageEvent):void
			{
				if (event.message.data) 
					debug.text += "\n"+event.message.data.toString();
			}
			
			protected function channel_mediaBroadcastHandler(event:MediaBroadcastEvent):void
			{
				playStream(event.mediaInfo);
			}
			
			/*************************************************************************  
			 * 						PUBLISH P2P STREAM
			 *************************************************************************/
			
			private function broadcast(event:Event):void
			{
				var cam:Camera 		= Camera.getCamera();
				var mic:Microphone 	= Microphone.getMicrophone();
				
				mic.setLoopBack(false);
				mic.rate = 8;
				
				channel.microphone = mic;
				channel.camera     = cam;
				channel.startBrodcast();
				
				Button(event.target).enabled = false;
			}
			
			
			/*************************************************************************  
			 * 							PLAY P2P STREAM
			 *************************************************************************/
			
			private function playStream(mediaInfo:MediaVO):void
			{
				Tracer.log(TestSendReceiveGroupStream, "playStream - publisherStream: "+mediaInfo.publisherStream);
				Tracer.log(TestSendReceiveGroupStream, "playStream - subscriber group spec: "+ channel.localClientGroupspecWithAuthorization);
				Tracer.log(TestSendReceiveGroupStream, "playStream - gSpec: "+mediaInfo.publisherGroupspecWithAuthorization);
				
				_testReceiveStream = new NetStream(channel.groupNetConnection(), mediaInfo.publisherGroupspecWithAuthorization);// mediaInfo.publisherGroupspecWithAuthorization);
				_testReceiveStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				
				_testReceiveStream.play(mediaInfo.publisherStream);
				
				setupVideo(_testReceiveStream, null);
			}
			
			private function netStatusHandler(event:NetStatusEvent):void
			{
				Tracer.log(TestSendReceiveGroupStream, "NetStream netStatusHandler - event.info.code: "+event.info.code);
			}
			
			private function setupVideo(netStream:NetStream, cam:Camera):void
			{
				Tracer.log(TestSendReceiveGroupStream, "setupVideo - netStream: "+netStream+" cam: "+cam);
				
				if(!_video)
				{
					_video = new Video(320,240);
					
					var uic:UIComponent = new UIComponent();
					uic.addChild(_video);
					videoHolder.addElement(uic);
				}
				
				if(netStream) _video.attachNetStream(netStream);
				else if(cam)  _video.attachCamera(cam);
			}
			
			/*************************************************************************  
			 * 							MESSAGING
			 *************************************************************************/
			protected function sendMessage(message:String):void
			{
				if(message != '') channel.sendMessageToAll(message);
			}
			
			/*************************************************************************  
			 * 							MONITOR SIGNAL 
			 *************************************************************************/
			private var _urlMonitor:URLMonitor;
			
			private function startMonitor():void
			{
				Tracer.log(this, "startMonitor()");
				_urlMonitor = new URLMonitor(new URLRequest(channel.multicastAddress) );
				_urlMonitor.addEventListener(StatusEvent.STATUS, onMonitorStatus);
				_urlMonitor.start();
			}
			
			private function onMonitorStatus(event:StatusEvent):void
			{
				monitorStatus.text = (_urlMonitor.available) ? "CONNECTED" : "DISCONNECTED";
			}
			
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		
		<p2p:LocalNetworkDiscovery
			id="channel"
			loopback="false"
			clientName="{ clientName }"
			dataReceived="channel_dataReceivedHandler(event)"
			mediaBroadcast="channel_mediaBroadcastHandler(event)"
			groupConnected="channel_groupConnectedHandler(event)"/>
		
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout
			paddingTop="10"
			paddingBottom="10"
			paddingLeft="10"
			paddingRight="10"/>
	</s:layout>
	
	<s:HGroup width="100%">
		<s:TextInput id="textInput" width="100%" enter="sendMessage(textInput.text)"/>
		<s:Button label="send message to all" click="sendMessage(textInput.text)" />
	</s:HGroup>
	
	<s:HGroup
		width="100%"
		paddingLeft="5"
		paddingRight="5">
		
		<s:BorderContainer
			id="videoHolder"
			height="240"
			width="320"/>
		
		<s:TextArea 
			id="debug" 
			width="100%" 
			height="100%"/>
		
	</s:HGroup>
	
	<s:HGroup
		width="100%">
		<s:Button
			label="send stream"
			enabled="{ sendStreamButtonEnabled }"
			click="broadcast(event)"/>
		<s:TextInput id="clientNameInput" text="{clientName}" width="100%" enter="updateClientName();"/>
		<s:Button label="update client name" click="updateClientName();" />
	</s:HGroup>
	
	<s:HGroup
		width="100%">
		
		<s:Label
			text="network status: "/> 
		
		
		<s:Label
			id="monitorStatus"/>
		
	</s:HGroup>
	
	<s:List x="0" y="100" width="100%" height="100%" 
			dataProvider="{ channel.clients }"
			labelField="clientName"/>
</s:Group>
